" .vimrc
" Author: Jorge Chato <jorgechato1@gmail.com>
" Source: https://github.com/orggue/.dotfiles
" Web:		http://jorgechato.com
" Preamble --------------------------------------------------------------- {{{
set nocompatible                        " I'm using vim not vi
"filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
set rtp+=~/.vim/c-support
call vundle#rc()

filetype plugin indent on
syntax on
" }}}

" Basic options ---------------------------------------------------------- {{{
" size of a hard tabstop
set backspace=indent,eol,start
set smartindent
set tabstop=4
" a combination of spaces and tabs are used to simulate tab stops at a width
" other than the (hard)tabstop
set softtabstop=4
set smarttab
" size of an indent"
set shiftwidth=4
autocmd FileType *.yaml *. yml set tabstop=2|set shiftwidth=2|set softtabstop=2
set noexpandtab
set encoding=utf-8
set shell=/bin/zsh
set number                              " Show linenumbers
set showcmd                             " Show info in the right bottom
set ttyfast
set textwidth=80
set colorcolumn=+1                      " Display margin at 81
set t_Co=256
set nocursorline                        " Do not hightlight the current line
set scrolloff=5
set sidescroll=1
set sidescrolloff=10
set formatoptions=qcrn1
set clipboard+=unnamed                  " Yanks go on clipboard instead.
set pastetoggle=<F8>
set novisualbell                        " No blinking .
set noerrorbells                        " No noise.
set lazyredraw
set autoread                            " Reload file if it's modified outside
set autowrite
set autoindent
set ruler                               " Show line and column number
set showbreak=↪
set title
set wrap								" long text with breackline
set linebreak
set list
set listchars=tab:·\ ,trail:·,extends:❯,precedes:❮
"set listchars=tab:·\ ,trail:·,eol:↩,extends:❯,precedes:❮
set printoptions=paper:A4,syntax:n
set pfn=:h8
set penc="cp1252"
let mapleader = " "
let g:ruby_path = system('echo $HOME/.rbenv/shims')
set wildignore+=*.pyc,*.swp,*.pdf,*.class
let g:ctrlp_custom_ignore = 'node_modules|DS_Store|git|data'
set guifont=Monospace\ 8
"set guifont=Inconsolata\ 10

" Backups {{{
set backupskip=/tmp/*,/private/tmp/*"
set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//
set backup
set noswapfile
set clipboard=unnamedplus
" }}}
" GUI & Terminal settings {{{
if has("gui_running")
	autocmd GUIEnter * call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")
	"you need wmctrl to be installed
	map <silent> <F11>
	\    :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

	set guioptions= " disable all UI options
	set guicursor+=a:blinkon0 " disable blinking cursor
	set ballooneval
	autocmd GUIEnter * set novisualbell t_vb=
endif
" }}}
" }}}

" Bundles ----------------------------------------------------------------- {{{
Plugin 'VundleVim/Vundle.vim'

"Themes {{{
Plugin 'orggue/vim-youcolor'
Plugin 'endel/vim-github-colorscheme'
"}}}

Plugin 'danro/rename.vim'
Plugin 'mattn/emmet-vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Shutnik/jshint2.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'ervandew/supertab'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'edkolev/tmuxline.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'tpope/vim-vinegar'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'enricobacis/vim-airline-clock'
Plugin 'jmcantrell/vim-virtualenv'
Plugin 'LaTeX-Box-Team/LaTeX-Box'
Plugin 'justinmk/vim-syntax-extra'
Plugin 'elzr/vim-json'
Plugin 'airblade/vim-gitgutter'
Plugin 'easymotion/vim-easymotion'
Plugin 'kshenoy/vim-signature'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'tpope/vim-repeat'
Plugin 'davidhalter/jedi-vim'
"syntax
Plugin 'avakhov/vim-yaml'
Plugin 'fatih/vim-go'
Plugin 'modille/groovy.vim'
Plugin 'editorconfig/editorconfig-vim'
" }}}

" Plugin settings --------------------------------------------------------- {{{
"editorconfig {{{
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }}}
" Python jedi {{{
let g:jedi#popup_on_dot = 0
autocmd FileType python setlocal completeopt-=preview
" }}}
"airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
if has("gui_running")
	let g:airline_theme='lucius'
	"let g:airline_theme='raven'
	"let g:airline_theme='monochrome'
	"let g:airline_theme='dark'
	"let g:airline_theme='jellybeans'
	let g:airline#extensions#clock#format = '%H:%M'
else
	let g:airline_theme='term'
	if !exists('g:airline_symbols')
		let g:airline_symbols = {}
	endif
	let g:airline_powerline_fonts = 1
endif
" }}}
" C-Support {{{
let g:C_UseTool_cmake    = 'yes'
let g:C_UseTool_doxygen = 'yes'
let g:C_MapLeader  = ','
" C++ compiller comment the following line to C compiler
"let g:C_CplusCompiler
" }}}
" Latex {{{
let s:extfname = expand("%:e")
if s:extfname ==? "tex"
	let g:LatexBox_split_type="new"
endif
" }}}
" jshint2 {{{
set runtimepath+=~/.vim/bundle/jshint2.vim/
" }}}
" }}}

" Color scheme ------------------------------------------------------------ {{{
set term=screen-256color
let g:solarized_termcolors=256
syntax enable                           " Switch syntax highlighting on
set colorcolumn=80
" }}}

" Custom functions -------------------------------------------------------- {{{
" Switch vim theme {{{
let s:mycolor = "youcolor"
let s:hack = 1

function! SwitchColor()
	execute 'colorscheme '.s:mycolor

	if s:hack == 0
		set background=dark
	else
		set background=light
	endif

	"interface {{{
	hi Search cterm=underline
	" }}}

	let s:hack = s:hack < 1 ? s:hack+1 : 0
endfunction
" }}}
" Twiddle Case {{{
function! TwiddleCase(str)
	if a:str ==# toupper(a:str)
		let result = tolower(a:str)
	elseif a:str ==# tolower(a:str)
		let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
	else
		let result = toupper(a:str)
	endif
	return result
endfunction
" }}}

" }}}

" Custom interface -------------------------------------------------------- {{{
set cursorline
set hlsearch

" GUI & Terminal settings {{{
if has("gui_running")
	colorscheme github
	set background=light

	"interface {{{
	hi Search cterm=underline
	" }}}
else
	:call SwitchColor()
	map <F10> <esc>:call SwitchColor()<CR>
endif
" }}}
" }}}

" Language ---------------------------------------------------------------- {{{
set spell spelllang=en_us
"set nospell
" }}}

" Mappings ---------------------------------------------------------------- {{{
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv
nnoremap <leader>+ :set gfn=*<CR>
nnoremap <leader>t :bnext<CR>
nnoremap <leader>w :bd<CR>
map <F7> mzgg=G'zmz
map <F8> <leader>cc
map <F9> <leader>cu
map <leader>p <esc>:CtrlPBuffer<CR>
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>a
inoremap <F2> <C-O>za
nnoremap <F2> za
nnoremap <F3> zR
onoremap <F2> <C-C>za
vnoremap <F3> zf
nnoremap td  :tabclose<CR>
nnoremap tn :tabnew<CR>
nn <F6> :setlocal spell! spell?<CR>
nnoremap cou :set nonumber!<CR>
vmap <leader>2 gj
vmap <leader>8 gk
vmap <leader>6 g$
vmap <leader>4 g^
nmap <leader>2 gj
nmap <leader>8 gk
nmap <leader>6 g$
nmap <leader>4 g^
map <Leader>f <Plug>(easymotion-sn)
omap <Leader>f <Plug>(easymotion-tn)
" For local replace
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left>
" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>
"Pretty tab
nmap <Leader>t= :Tabularize /=<CR>
vmap <Leader>t= :Tabularize /=<CR>
nmap <Leader>t: :Tabularize /:\zs<CR>
vmap <Leader>t: :Tabularize /:\zs<CR>
" fugitive git bindings
nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<Space>
nnoremap <leader>ge :Gedit<Space>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gp :Git push origin <Space>
nnoremap <leader>g- :Silent Git stash<CR>:e<CR>
nnoremap <leader>g+ :Silent Git stash pop<CR>:e<CR>
nnoremap <leader>gB :Gblame<CR>
nnoremap <leader>gg :Ggrep<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>gC :Git checkout<Space>
"nnoremap <leader>gl :silent Glog<CR>
"nnoremap <leader>gL :silent Glog<CR>:set nofoldenable<CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
" }}}

" Fold -------------------------------------------------------------------- {{{
set foldmethod=syntax
set nofoldenable

let javaScript_fold=1         " JavaScript
let perl_fold=1               " Perl
let php_folding=1             " PHP
let r_syntax_folding=1        " R
let ruby_fold=1               " Ruby
let sh_fold_enabled=1         " sh
let vimsyn_folding='af'       " Vim script
let xml_syntax_folding=1      " XML
" }}}
